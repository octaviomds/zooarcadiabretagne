tinymce.PluginManager.add("bf_actionitem", function (editor, url) {
  editor.ui.registry.addButton("bf_actionitem", {
    icon: 'link',
    tooltip: 'Insert/edit action item',
    onAction: function () {
      showDialog();
    }
  });
  editor.ui.registry.addContextToolbar('editBfActionItem', {
    predicate: function (node) {
      return node.dataset.actionItem ? true : false;
    },
    items: 'bf_actionitem',
    position: 'node',
    scope: 'node'
  });
  editor.ui.registry.addMenuItem('bf_insertActionItem', {
    text: 'Insert/edit action item',
    icon: 'link',
    onAction: function() {
      showDialog();
    }
  });
  editor.ui.registry.addMenuItem('bf_editActionItem', {
    text: 'Edit action item',
    icon: 'link',
    onAction: function() {
      showDialog();
    }
  });
  editor.ui.registry.addContextMenu('bf_actionItemContextMenu', {
    update: function (element) {
      return element.dataset.actionItem ? 'bf_editActionItem' : '';
    }
  });

  function showDialog() {
    let selection = editor.selection.getContent({ format: "html" });
  
    let selectedNode = editor.selection.getNode();
    let actionItem = null;
    let isEditing = false;
  
    let parent = selectedNode.parentNode;
    let firstChild = selectedNode.firstChild;
  
    if (!selectedNode.dataset.actionItem) {
      if (parent && parent.dataset && parent.dataset.actionItem) {
        selectedNode = parent;
      } else {
        while (
          firstChild &&
          firstChild.dataset &&
          !firstChild.dataset.actionItem
        ) {
          firstChild = firstChild.firstChild;
        }
        if (
          firstChild &&
          firstChild.dataset &&
          firstChild.dataset.actionItem
        ) {
          selectedNode = firstChild;
        }
      }
    }
  
    if (
      selectedNode &&
      selectedNode.dataset &&
      selectedNode.dataset.actionItem
    ) {
      try {
        actionItem = JSON.parse(unescape(selectedNode.dataset.actionItem));
        isEditing = true;
      } catch (error) {
        actionItem = null;
        isEditing = false;
      }
    }
  
    buildfire.actionItems.showDialog(
      actionItem,
      { allowNoAction: false, showIcon: false, showTitle: false },
      (err, actionItem) => {
        if (err) return console.error(err);
        if (!actionItem) return;
  
        let stringifiedActionItem = escape(JSON.stringify(actionItem));
  
        if (isEditing) {
          selectedNode.dataset.actionItem = stringifiedActionItem;
          selectedNode.setAttribute("onclick", `buildfire.actionItems.execute(JSON.parse(unescape('${stringifiedActionItem}')), ()=>{})`)
        } else {
          let anchor = `<a data-action-item="${stringifiedActionItem}" onclick="buildfire.actionItems.execute(JSON.parse(unescape('${stringifiedActionItem}')), ()=>{})">${selection}</a>`;
          editor.selection.setContent(anchor);
        }
        editor.isNotDirty = false;
        editor.fire("change");
      }
    );
  }

  return {
    getMetadata: function () {
      return {
        name: "Action Item Plugin",
        url: "https://github.com/BuildFire/sdk/wiki/How-to-use-action-Items",
      };
    },
  };
});
